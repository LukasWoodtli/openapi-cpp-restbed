{{>licenseInfo}}
{{#operations}}/*
 * {{classname}}.h
 *
 * {{description}}
 */

#ifndef {{classname}}_H_
#define {{classname}}_H_

{{{defaultInclude}}}
#include <memory>
#include <utility>
#include <exception>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

{{#imports}}{{{import}}}
{{/imports}}

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

///
/// Exception to flag problems in the handlers
///
class {{declspec}} {{classname}}Exception: public std::exception
{
public:
      {{classname}}Exception(int status_code, std::string what);

      int getStatus() const;
      const char* what() const noexcept override;

private:
      int m_status;
      std::string m_what;
};

{{#operation}}
/// <summary>
/// {{summary}}
/// </summary>
/// <remarks>
/// {{notes}}
/// </remarks>
class {{declspec}} {{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource: public restbed::Resource
{
public:
    {{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource();
    virtual ~{{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource();

    virtual {{#returnType}}std::pair<int, {{{.}}}>{{/returnType}}{{^returnType}}int{{/returnType}} handler_{{httpMethod}}(
            {{#allParams}}{{{dataType}}} const & {{{baseName}}}{{^-last}}, {{/-last}}{{/allParams}}
    );

    {{#vendorExtensions.x-codegen-other-methods}}
    virtual {{#returnType}}std::pair<int, {{{.}}}>{{/returnType}}{{^returnType}}int{{/returnType}} handler_{{httpMethod}}(
            {{#allParams}}{{{dataType}}} const & {{{baseName}}}{{^-last}}, {{/-last}}{{/allParams}}
    );
    {{/vendorExtensions.x-codegen-other-methods}}

private:
    void handler_{{httpMethod}}_internal(const std::shared_ptr<restbed::Session> session);
    {{#vendorExtensions.x-codegen-other-methods}}
    void handler_{{httpMethod}}_internal(const std::shared_ptr<restbed::Session> session);
    {{/vendorExtensions.x-codegen-other-methods}}
};


{{/operation}}

//
// The restbed service to actually implement the REST server
//
class {{declspec}} {{classname}}
{
public:
	explicit {{classname}}(int const& port);
	~{{classname}}();

        {{#operation}}
        void set{{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource(std::shared_ptr<{{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource> sp{{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource);
        {{/operation}}

        virtual void publishResources();

        void setRootPath(std::string path);

        std::shared_ptr<restbed::Settings> createSettings();

        virtual void startService();
        virtual void stopService();

protected:
	{{#operation}}
	std::shared_ptr<{{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource> m_sp{{classname}}{{vendorExtensions.x-codegen-resource-name}}Resource;
	{{/operation}}

private:
        std::shared_ptr<restbed::Service> m_service;
        std::string m_rootPath = "{{contextPath}}";
        int const m_port = 0;
};


{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

#endif /* {{classname}}_H_ */

{{/operations}}
